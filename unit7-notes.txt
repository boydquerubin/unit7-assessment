//Step 1: 2
Results for the extraLargeArray
insert 679.186 ms
append 2.3909 ms

//Step 1:3
┌─────────────────┬─────────────┬───────────────┐
│ (index)         │ append      │ insert        │
├─────────────────┼─────────────┼───────────────┤
│ tinyArray       │ '78.8 μs'   │ '51.9 μs'     │
│ smallArray      │ '10.5 μs'   │ '19.5 μs'     │
│ mediumArray     │ '41.1 μs'   │ '140.2 μs'    │
│ largeArray      │ '590.6 μs'  │ '7.7096 ms'   │
│ extraLargeArray │ '1.3467 ms' │ '734.6761 ms' │
└─────────────────┴─────────────┴───────────────┘

//Step 1:4
The timing results give us a clear picture of how each function handles larger arrays.
As the array size increases, both `doublerAppend` and `doublerInsert` take longer to execute, 
but `doublerInsert` seems to slow down more dramatically, especially with bigger arrays.
This suggests that `doublerInsert` might not handle larger arrays as efficiently as `doublerAppend`.
In terms of performance, `doublerAppend` maintains a steadier increase in execution time across 
different array sizes, indicating that it scales better than `doublerInsert`.

//Step1:5
The slower function, `doublerInsert`, likely experiences significant slowdowns due to its algorithmic complexity.
In each iteration of the loop, it inserts a new element at the beginning of the array using `unshift()`.
As the array grows larger, inserting elements at the beginning becomes increasingly costly because it requires 
shifting all existing elements one index to the right to make room for the new element. 
This operation has a time complexity of O(n), where n is the number of elements in the array. Consequently,
with larger arrays, the time taken to insert each element increases substantially, resulting in the observed slowdown.
In contrast, the `doublerAppend` function simply appends elements to the end of the array,
which has a time complexity of O(1), making it more efficient, especially for larger arrays.

